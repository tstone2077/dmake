#!/bin/bash

#userConfigFile=$(pwd)/user.dmake
#runConfigFile=$(pwd)/run.dmake
userConfigFile=user.dmake
runConfigFile=run.dmake

# Defaults
name="tstone/tlsbash"
version="latest"
container_name="tlsbash"
rootdir="$(pwd)"
ACTION="build"
run_options=""

usage () {
    echo "dmake [-u path/to/user.config] [-r path/to/run.dconfig] [build | run | irun | exec | stop | rm | dconfig | rmi-none]"

    echo '
init:
    runs git init to create a new repository in the current directory
    adds a .gitingore to ignore the user specific dconfig
    creates a user specific dconfig if one does not already exist
    creates a run config that can be checked into the repo

USER CONFIG FILE 
    contains info specific to the user'"'"'s environment:
        name           : the name of the image to build or run
        container_name : the name of the container to run
        version        : the version (tag) of the image to build or run
        rootdir        : the root directory of the build
Example of '$(basename $userConfigFile)' file:
'"$user_template"'

RUN CONFIG FILE 
    contains info for the standard run command and other more advanced info (like starting depenedent containser
    run_options    : options to pass to docker run (such as ports, env, volumes, etc.).
        Note: --name, --tag, --rm, -it are not needed)

Example of '$(basename $runConfigFile)' file:
'"$run_template"
    exit 0
}

debug=0
silent=0
show_help=0
action_executed=0
ACTION=""
while test $# != 0
do
    case "$1" in
    -h|--help)
        show_help=1
        ;;  
    -s|--silent=?)
        silent=1
        ;;  
    -d|--debug=?)
        debug=1
        ;;  
    -r|--run-config=?)
        shift
        configFile="$1"
        ;;
    -u|--user-config=?)
        shift
        configFile="$1"
        ;;
    *)
        ACTION=$@
        while test $# != 0
        do
            shift
        done
        ;;
    esac
    shift
done
if test "$ACTION" = ""
then
    ACTION="build"
fi

if test $debug -eq 1
then
    set -x
fi

#template user config
user_template='name="'"${USER}/$(basename $(pwd))"'"
container_name="'"$(basename $(pwd))"'"
version="latest"
rootdir="'"$(pwd)"'"'

#template user config
run_template='if test -e "'$userConfigFile'"
then
    . '$userConfigFile'
fi
run_options='"''"'
#run_options='"'"'-p 8081:80 -v some/path:/container/some/path'"'"


if test $show_help -eq 1
then
    usage
fi

if test $silent -eq 0
then
    output=/dev/stdout
else
    output=/dev/null
fi

########################################
# init function
########################################
if test "$ACTION" = "init"
then
    action_executed=1
    if ! test -d .git
    then
        echo "Initializing git..." > $output
        git init > $output 2>&1 || exit 1
        echo "" > $output
    fi
    if ! test -e .gitignore
    then
        echo "Creating .gitignore..." > $output
        echo $(basename $userConfigFile) > .gitignore
        echo "" > $output
    fi
    if ! test -e "$userConfigFile"
    then
        echo Writing config into $userConfigFile...> $output
        echo "$user_template" > $userConfigFile
        cat $userConfigFile > $output
        echo "" > $output
    fi
    if ! test -e "$runConfigFile"
    then
        echo Writing config into $runConfigFile...> $output
        echo "$run_template" > $runConfigFile
        cat $runConfigFile > $output
    fi
else
    . $runConfigFile > $output 2>&1 || exit 2
fi

########################################
# stop function
########################################
if test "$ACTION" = "stop"
then
    action_executed=1
    docker stop $container_name
fi

########################################
# build function
########################################
if test "$ACTION" = "build"
then
    action_executed=1
    docker build -t $name:$version $rootdir
fi

########################################
# run function
########################################
if test "$ACTION" = "run"
then
    action_executed=1
    docker run -d $run_options --name $container_name $name:$version
fi

########################################
# irun function
########################################
if test "$ACTION" = "irun"
then
    action_executed=1
    docker run -it $run_options --rm $name:$version $SHELL
fi

########################################
# rm function
########################################
if test "$ACTION" = "rm"
then
    action_executed=1
    docker rm -f $container_name
fi

########################################
# exec function
########################################
if test "$ACTION" = "exec"
then
    action_executed=1
    docker exec -it $container_name $SHELL
fi

########################################
# rmi-none function
########################################
if test "$ACTION" = "rmi-none"
then
    action_executed=1
    docker rmi $(docker images | grep "^<none>" | awk '{print $3}')
fi

if test $action_executed -eq 0
then
    docker $ACTION
fi
